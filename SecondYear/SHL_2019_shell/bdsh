#!/bin/bash

databaseExist=true
emptyDatabase=false

declare -i exitSuccess=0
declare -i exitFailure=1

declare -a fileName=""
jsonFormatted=false

declare -A commandArgs

declare -A jsonNewNames
declare -A jsonTableNames
declare -A jsonTableObjectNumber

declare -A jsonDesc
declare -A jsonData

checkFileName()
{
	if [ ! -z "$BDSH_File" ]; then
		fileName="$BDSH_File"
		return
	fi

	if [[ -f ".bdshrc" ]]; then
		for line in $(cat ".bdshrc"); do
			keySearched=$(echo "$line" | sed 's/=.*//')
	        valueSearched=$(echo "$line" | sed 's/.*=//')
	        if [[ "$keySearched" = "BDSH_File" ]]; then
	        	fileName="$valueSearched"
	        	unset keySearched
	        	unset valueSearched
	        	unset line
	        	return
	        fi
    	done
        return
	fi

    if [[ -f "~/.bdshrc" ]]; then
        for line in $(cat "~/.bdshrc"); do
            keySearched=$(echo "$line" | sed 's/=.*//')
            valueSearched=$(echo "$line" | sed 's/.*=//')
            if [[ "$keySearched" = "BDSH_File" ]]; then
                fileName="$valueSearched"
                unset keySearched
                unset valueSearched
                unset line
                return
            fi
        done
    fi
}


parseCommands()
{
	argTab=("$@")
    for ((k = 0; k < $#; ++k))
    do
        param="${argTab[k]}"
        commandArgs[0]="${argTab[k+1]}"
        commandArgs[1]="${argTab[k+2]}"
        commandArgs[2]="${argTab[k+3]}"
        if [[ $param = "create" ]]; then
        	if [[ "${commandArgs[0]}" = "" ]]; then
                echoError "Syntax error : Usage\t"
        		exit $exitFailure
        	fi
            if [[ $databaseExist = false ]] && [[ "${commandArgs[0]}" != "database" ]]; then
                echoError "Database does not exist"
                exit $exitFailure
            fi
        	create
            exit $exitSuccess
        elif [[ $param = "insert" ]]; then
            if [[ -f "$fileName" ]] && ([[ ! -r "$fileName" ]] || [[ ! -w "$fileName" ]]); then
                if [[ ! -r "$fileName" ]]; then
                    echoError "No read permissions on database"
                fi
                if [[ ! -w "$fileName" ]]; then
                    echoError "No write permissions on database"
                fi
                exit $exitFailure
            fi
        	if [[ "${commandArgs[0]}" = "" ]] || [[ "${commandArgs[1]}" = "" ]]; then
                echoError "Syntax error : Usage\t"
        		exit $exitFailure
        	fi
            if [[ $databaseExist = false ]]; then
                echoError "Database does not exist"
                exit $exitFailure
            fi
        	insert
            exit $exitSuccess
        elif [[ $param = "describe" ]]; then
            if [[ -f "$fileName" ]] && [[ ! -r "$fileName" ]]; then
                if [[ ! -r "$fileName" ]]; then
                    echoError "No read permissions on database"
                fi
                exit $exitFailure
            fi
			if [[ "${commandArgs[0]}" = "" ]]; then
                echoError "Syntax error : Usage\t"
        		exit $exitFailure
        	fi
            if [[ $databaseExist = false ]]; then
                echoError "Database does not exist"
                exit $exitFailure
            fi
        	describe
            exit $exitSuccess
        elif [[ $param == "select" ]]; then
            if [[ -f "$fileName" ]] && [[ ! -r "$fileName" ]]; then
                if [[ ! -r "$fileName" ]]; then
                    echoError "No read permissions on database"
                fi
                exit $exitFailure
            fi
        	if [[ "${commandArgs[0]}" = "" ]] || [[ "${commandArgs[1]}" = "" ]]; then
                echoError "Syntax error : Usage\t"
        		exit $exitFailure
        	fi
            if [[ $databaseExist = false ]]; then
                echoError "Database does not exist"
                exit $exitFailure
            fi
            if [[ $emptyDatabase = true ]]; then
                echoError "Select on empty database"
                exit $exitFailure
            fi
        	selectDb
            exit $exitSuccess
        fi
    done
    unset argTab
    echoError "Syntax error"
    exit $exitFailure
}

formatFileContent()
{
    # Remove '\n' and spaces not in values and keys.
    declare -i strMode=-1
    for line in "$fileContent"; do
        line=$(echo "$line" | sed -e 's/^[[:space:]]*//' | sed -e 's/[[:space:]]*$//' | tr --delete '\n')
        newLine=""
        for ((i=0; $i < ${#line}; i++)); do
            if [[ "${line:$i:1}" = '"' ]]; then
                strMode=$(( $strMode*-1 ))
            fi

            if !([[ $strMode = -1 ]] && [[ "${line:$i:1}" = " " ]]); then
                newLine+="${line:$i:1}"
            fi
        done
        newFileContent+="$newLine"
    done
    fileContent="$newFileContent"

    for (( 1; 1; ))
    do
        if [[ "$fileContent" =~ \"([^\"]*)\" ]]; then
            key="${BASH_REMATCH[1]}"
            fileContent="${fileContent#*\"\:}"
        fi
        if [[ "$fileContent" =~ \[([^\]]*)\] ]]; then
            value="${BASH_REMATCH[1]}"
            fileContent="${fileContent#*\]\,}"
        fi
        if [[ "$key" =~ "desc_"([^\"]*) ]]; then
            key="${BASH_REMATCH[1]}"
            jsonNewNames[${#jsonNewNames[*]}]="${key}"
            jsonDesc["$key"]="$value"
        elif [[ "$key" =~ "data_"([^\"]*) ]]; then
            key="${BASH_REMATCH[1]}"
            jsonNewNames[${#jsonNewNames[*]}]="${key}"
            jsonData["$key"]="$value"
        else
            unset key
            unset value
            break
        fi
        unset key
        unset value
    done

}

removeDoubleKeys()
{
    declare -i sizeDeb=${#jsonNewNames[@]}
    declare -i j=0
    for (( i=0; i < $sizeDeb; i++ ));
    do
        isInTab=false
        for line in "${jsonTableNames[@]}"
        do
            if [[ "$line" = "${jsonNewNames[$i]}" ]]; then
                isInTab=true
            fi
        done
        if [[ $isInTab = false ]]; then
            jsonTableNames[$j]="${jsonNewNames[$i]}"
            j=$(($j+1))
        fi
    done
    unset sizeDeb
}

verifyDataDesc()
{
    declare -i j=0
    for (( i=0; i < ${#jsonTableNames[@]}; i++ ));
    do
        if [[ "${jsonTableNames[$i]}" != "${jsonTableNames[$j]}" ]]; then
            echoError "No data for desc : ${jsonTableNames[$i]}"
            exit $exitFailure
        fi
        j+=1
    done
}

createObjectTD()
{
    argObj="$1"
    for (( 1; 1;))
    do
        if [[ "$argObj" =~ \"([^\"]*)\" ]]; then
            key="${BASH_REMATCH[1]}"
            object[${#object[*]}]="${BASH_REMATCH[1]}"
            argObj="${argObj#*\"*\"}"
        else
            break
        fi
        if [[ "$argObj" =~ \"([^\"]*)\"\, ]]; then
            jsonData["$line", $k, "$key"]="${BASH_REMATCH[1]}"
            object[${#object[*]}]="${BASH_REMATCH[1]}"
            argObj="${argObj#*\"\,}"
        elif [[ "$argObj" =~ \"([^\"]*)\" ]]; then
            jsonData["$line", $k, "$key"]="${BASH_REMATCH[1]}"
            object[${#object[*]}]="${BASH_REMATCH[1]}"
            argObj="${argObj#*\"}"
        else
            break
        fi
        unset key
    done
}

translateData()
{
    declare -A dataArray
    arg="$1"
    for (( k=0; 1; k++))
    do
        declare -A object
        if [[ "$arg" =~ \{([^\}]*)\}\, ]]; then
            createObjectTD "${BASH_REMATCH[1]}"
            arg="${arg#*\}\,}"
            dataArray[${#dataArray[*]}]="${object}"
        elif [[ "$arg" =~ \{([^\}]*)\} ]]; then
            createObjectTD "${BASH_REMATCH[1]}"
            arg="${arg#*\}}"
            dataArray[${#dataArray[*]}]="${object}"
        else
            break
        fi
    done

    jsonTableObjectNumber[$line]=${#dataArray[*]}
    # Format get
    # echo -e "${jsonData[$line, 0, "id"]}"
}

translateDesc()
{
    declare -A descArray
    arg="$1"
    for (( k=0; 1; k++))
    do
        if [[ "$arg" =~ \"([^\"]*)\"\, ]]; then
            jsonDesc["$line", $k]="${BASH_REMATCH[1]}"
            arg="${arg#*\"\,}"
        elif [[ "$arg" =~ \"([^\"]*)\" ]]; then
            jsonDesc["$line", $k]="${BASH_REMATCH[1]}"
            arg="${arg#*\"}"
        else
            unset key
            unset value
            break
        fi
    done

    # Forme d'appel Desc
    #declare -A test="${jsonDesc[$line, 1]}"
    #echo -e "${test}"
}


writeDesc()
{
    textContent+="["
    for ((j=0; ;j++))
    do
        if [[ "${jsonDesc["$1", $j]}" = "" ]]; then
            break
        fi
        textContent+="\"${jsonDesc["$1", $j]}\""
        if [[ "${jsonDesc["$1", $((j+1))]}" != "" ]]; then
            textContent+=","
        fi
    done
    textContent+="]"
}

writeData()
{
    textContent+="["
    for ((j=0; j < ${jsonTableObjectNumber["$1"]};j++))
    do
        textContent+="{"
        for ((x=0; ;x++))
        do
            key="${jsonDesc["$1", $x]}"
            if [[ "${jsonDesc["$1", $x]}" = "" ]]; then
                break
            fi
            textContent+="\"$key\":\"${jsonData["$1", $j, "$key"]}\""
            if [[ "${jsonDesc["$1", $((x+1))]}" != "" ]]; then
                textContent+=","
            fi
        done
        textContent+="}"
        if [[ $((j+1)) != ${jsonTableObjectNumber["$1"]} ]]; then
            textContent+=","
        fi
    done
    textContent+="]"
}

rewriteDb()
{
    if [[ ! -w "$fileName" ]]; then
        echoError "No write permissions on database"
        exit $exitFailure
    fi
    textContent="{"

    for (( k=0; k < ${#jsonTableNames[@]}; k++))
    do
        nameDesc="\"desc_${jsonTableNames[$k]}\""
        textContent+="$nameDesc:"
        writeDesc "${jsonTableNames[$k]}"
        textContent+=","
    done

    for (( k=0; k < ${#jsonTableNames[@]}; k++))
    do
        nameData="\"data_${jsonTableNames[$k]}\""
        textContent+="$nameData:"
        writeData "${jsonTableNames[$k]}"
        if [[ $((k+1)) != ${#jsonTableNames[@]} ]]; then
            textContent+=","
        fi
    done

    textContent+="}"

    echo -e "$textContent" > "$fileName"
}

parseJson()
{
    if [[ "$fileName" = "" ]]; then
        echoError "No filename, no BASH_File env var and no .bdshrc"
        exit $exitFailure
    fi

    if [[ ! -f "$fileName" ]]; then
        databaseExist=false
        return
    fi

    fileContent=$(cat "$fileName")

    if [[ "$fileContent" = "{}" ]]; then
        emptyDatabase=true
    fi

    if [[ "${fileContent[0]:0:1}" != "{" ]] || [[ "${fileContent:$((${#fileContent}-1)):1}" != "}" ]]; then
        echo -e "${fileContent[0]:0:1} + ${fileContent:$((${#fileContent}-1)):1}"
        return
    fi

    formatFileContent
    removeDoubleKeys
    verifyDataDesc

    for line in "${jsonTableNames[@]}"; do
        translateDesc "${jsonDesc[$line]}"
        translateData "${jsonData[$line]}"
    done
}

setOptions()
{
    argTab=("$@")
    if [[ "$argTab" = "" ]]; then
        cat "README.md" >&2
        exit $exitFailure
    fi
    declare -i x=0
    for ((i = 0; i < $#; ++i))
    do
        param=${argTab[i]}
        param2=${argTab[i+1]}
        if [[ $param = "-"* ]]
        then
            if [[ $param = *"h"* ]]
            then
                cat "README.md"
                exit $exitSuccess
                x=1
            fi
            if [[ $param = *"f"* ]]; then
                fileName="$param2"
                x=1
            fi
            if [[ $param = *"j"* ]]; then
                spacesOption=true
                x=1
            fi
            if [[ x = 0 ]]; then
                echoError "Wrong option."
                exit $exitFailure;
            fi
        fi
        x=0
    done

    unset argTab
}









checkArguments()
{
	exist=false
    declare -i i=0
	for line in "${jsonData[$i]}"; do
		if [[ "$commandArgs[0]" = "${line}" ]]; then
			exist=true
		fi
		i+=1
	done
	if [ $exist = false ]; then
		exit ${exitFailure}
	fi
}

parsArgs()
{
	declare -a str
	declare -A argsArray

	for char in commandArgs[1]
	do
		str+=${char}
		if [[ char = ',' ]]; then
			argsArray[${#argsArray[*]}]="$str"
			str=""
		fi
	done
	argsArray[${#argsArray[*]}]="$str"
	unset str
}

verifyArgsSelectDb()
{
    if [[ "$1" = "" ]] || [[ "$2" = "" ]]; then
        echoError "Syntax error"
        exit $exitFailure
    fi

    if [[ "$3" != "" ]] && [[ "$3" != "order" ]]; then
        echoError "Syntax error"
        exit $exitFailure
    fi

    for ((j=0; ;j++))
    do
        if [[ "${jsonTableNames[$j]}" = "" ]]; then
            echoError "Table does not exist"
            exit $exitFailure
        fi
        if [[ "${jsonTableNames[$j]}" = "$1" ]]; then
            break
        fi
    done

    if [[ "$2" =~ (,,) ]] || [[ "$2" = ","* ]] || [[ "$2" = *"," ]]; then
        echoError "Syntax error"
        exit $exitFailure
    fi
}

displaySelectJson()
{
    echo -e "{"

    echo -e "  \"desc_${commandArgs[0]}\": ["

    for (( k=0; k < ${#namesArray[*]}; k++))
    do
        echo -ne "    \"${namesArray[$k]}\""
        if [[ $(($k+1)) != ${#namesArray[*]} ]]; then
            echo -e ","
        else
            echo -ne "\n"
        fi
    done

    echo -e "  ],"

    echo -e "  \"data_${commandArgs[0]}\": ["

    for ((j=0; j < ${jsonTableObjectNumber[${commandArgs[0]}]};j++))
    do
        echo -e "    {"
        for (( k=0; k < ${#namesArray[*]}; k++))
        do
            echo -ne "      \"${namesArray[$k]}\": \"${tableArray[${namesArray[$k]}, $j]}\"" ${lengths[$k]}
            if [[ $(($k+1)) != ${#namesArray[*]} ]]; then
                echo -ne ","
            fi
            echo -ne "\n"
        done

        if [[ $(($k+1)) != ${#namesArray[*]} ]]; then
            echo -e "    },"
        else
            echo -e "    }"
        fi
    done
    echo -e "  ]"
    echo -e "}"
}

displayFullLine()
{
    arg="$1"
    for (( i=0; i < $2; i++ ))
    do
        if [[ "${arg:i:1}" != "" ]]; then
            echo -ne "${arg:i:1}"
        else
            echo -ne " "
        fi
    done
}

displaySelect()
{
    declare -A lengths

    for (( k=0; k < ${#namesArray[*]}; k++))
    do
        declare -i length=0
        if [[ ${#namesArray[$k]} -gt $length ]]; then
            length=${#namesArray[$k]}
        fi
        for ((j=0; j < ${jsonTableObjectNumber[${commandArgs[0]}]};j++))
        do
            cmpLength=${#tableArray[${namesArray[$k]}, $j]}
            if [[ $cmpLength -gt $length ]]; then
                length=$cmpLength
            fi
        done
        length+=2
        lengths[$k]=$length
    done

    for (( k=0; k < ${#namesArray[*]}; k++))
    do
        if [[ $(($k+1)) != ${#namesArray[*]} ]]; then
            displayFullLine "${namesArray[$k]}" ${lengths[$k]}
            echo -ne "| "
        else
            echo -ne "${namesArray[$k]}"
        fi
    done

    echo -ne "\n"
    for (( k=0; k < ${#namesArray[*]}; k++))
    do
        for (( x=0; x < ${lengths[$k]}; x++))
        do
            echo -ne "-"
        done
        if [[ $(($k+1)) != ${#namesArray[*]} ]]; then
            echo -ne "--"
        fi
    done

    echo -ne "\n"

    for ((j=0; j < ${jsonTableObjectNumber[${commandArgs[0]}]};j++))
    do
        for (( k=0; k < ${#namesArray[*]}; k++))
        do
            if [[ $(($k+1)) != ${#namesArray[*]} ]]; then
                displayFullLine "${tableArray[${namesArray[$k]}, $j]}" ${lengths[$k]}
                echo -ne "|"
            else
                if [[ "${tableArray[${namesArray[$k]}, $j]}" != "" ]]; then
                    echo -ne " ${tableArray[${namesArray[$k]}, $j]}"
                fi
            fi
        done
        echo -ne "\n"
    done
}

orderTableArray()
{
    for ((t=0; $(($t)) < ${jsonTableObjectNumber[${commandArgs[0]}]};t++))
    do
        for ((j=0; $(($j+1)) < ${jsonTableObjectNumber[${commandArgs[0]}]};j++))
        do
            for ((u=0; u < ${#namesArray[*]}; u++))
            do
                elem1="${tableArray[${namesArray[$u]}, $j]}"
                elem2="${tableArray[${namesArray[$u]}, $((j+1))]}"
                if [[ "$elem1" > "$elem2" ]]; then
                    for ((k=0; k < ${#namesArray[*]}; k++))
                    do
                        elem1="${tableArray[${namesArray[$k]}, $j]}"
                        elem2="${tableArray[${namesArray[$k]}, $((j+1))]}"
                        tableArray[${namesArray[$k]}, $j]="$elem2"
                        tableArray[${namesArray[$k]}, $((j+1))]="$elem1"
                    done
                    break
                elif [[ "$elem1" = "$elem2" ]]; then
                    continue
                else
                    break
                fi
            done
        done
    done
}

selectDb()
{
    parseJson
    verifyArgsSelectDb "${commandArgs[0]}" "${commandArgs[1]}" "${commandArgs[2]}"

    declare -A tableArray
    declare -A namesArray
    arg="${commandArgs[1]}"
    for (( k=0; 1; k++))
    do
        if [[ "$arg" =~ ([^\,]*)\, ]]; then
            namesArray[${#namesArray[*]}]="${BASH_REMATCH[1]}"
            arg="${arg#*\,}"
        elif [[ "$arg" != "" ]]; then
            namesArray[${#namesArray[*]}]="$arg"
            arg=""
        else
            break
        fi
    done

    for (( k=0; k < ${#namesArray[*]}; k++))
    do
        for ((j=0; ;j++))
        do
            if [[ "${jsonDesc[${commandArgs[0]}, $j]}" = "" ]]; then
                echoError "Entry does not exist"
                exit $exitFailure
            fi
            if [[ "${jsonDesc[${commandArgs[0]}, $j]}" = "${namesArray[$k]}" ]]; then
                break
            fi
        done
    done

    for (( k=0; k < ${#namesArray[*]}; k++))
    do
        for ((j=0; j < ${jsonTableObjectNumber[${commandArgs[0]}]};j++))
        do
            tableArray["${namesArray[$k]}", $j]="${jsonData[${commandArgs[0]}, $j, ${namesArray[$k]}]}"
        done
    done

    if [[ "${commandArgs[2]}" = "order" ]]; then
        orderTableArray
    fi

    if [[ $spacesOption = true ]]; then
        displaySelectJson "$tableArray" "$namesArray"
    else
        displaySelect "$tableArray" "$namesArray"
    fi
}

describe()
{
    parseJson
    declare -i i=0
    present=false
    for ((i=0; 1; i++))
    do
        line="${jsonTableNames[$i]}"
        if [[ "$line" = "${commandArgs[0]}" ]]; then
            present=true
            break
        fi
        if [[ "$line" = "" ]]; then
            break
        fi
    done
    if [ $present = false ]; then
        echoError "Table does not exist"
        exit $exitFailure
    fi
    for ((i=0; 1; i++))
    do
        line="${jsonDesc[${commandArgs[0]}, $i]}"
        if [[ "$line" = "" ]]; then
            break
        fi
        echo -e "$line"
    done
}

declare -A varArray
declare -A valArray

parsArgsInsert()
{
    declare -a var
    declare -a val
    valBool=false

    declare -A tableArray
    arg="$1"
    for (( k=0; 1; k++))
    do
        if [[ "$arg" =~ ^([^\=]*)\= ]]; then
            var="${BASH_REMATCH[1]}"
            arg="${arg#*\=}"
        fi
        if [[ "$arg" =~ ([^\,]*)\, ]]; then
            val="${BASH_REMATCH[1]}"
            arg="${arg#*\,}"
            valArray[${#valArray[*]}]="$val"
            varArray[${#varArray[*]}]="$var"
        elif [[ "$arg" != "" ]]; then
            val="$arg"
            valArray[${#valArray[*]}]="$val"
            varArray[${#varArray[*]}]="$var"
            arg=""
        else
            break
        fi
    done

    unset var
    unset val
}

verifyVarArray()
{
    declare -i i=0
    declare -i j=0

    if [[ ${#varArray[*]} != ${#valArray[*]} ]]; then
        echoError "Table part does not exist"
        exit ${exitFailure}
    fi

    for line in "${varArray[@]}"
    do
        for ((j=0; 1; j++))
        do
            if [[ "${jsonDesc[$1, $j]}" = "" ]]; then
                echoError "Table part does not exist"
                exit ${exitFailure}
            fi
            if [[ "${line}" = "${jsonDesc[$1, $j]}" ]]; then
                break
            fi
        done
    done
    unset i
    unset j
}

verifyArgsInsert()
{
    if [[ "$1" = "" ]]; then
        echoError "Syntax error"
        exit $exitFailure
    fi
    for ((j=0; ;j++))
    do
        if [[ "${jsonTableNames[$j]}" = "" ]]; then
            echoError "Table does not exist"
            exit $exitFailure
        fi
        if [[ "${jsonTableNames[$j]}" = "$1" ]]; then
            break
        fi
    done

    if [[ "$2" =~ (,,) ]] || [[ "$2" = ","* ]] || [[ "$2" = *"," ]]; then
        echoError "Syntax error"
        exit $exitFailure
    fi
}

insert()
{
    parseJson
    verifyArgsInsert "${commandArgs[0]}" "${commandArgs[1]}"
    parsArgsInsert "${commandArgs[1]}"

    verifyVarArray "${commandArgs[0]}"

    declare -i i=0
    for ((i=0; i < "${#varArray[@]}"; i++))
    do
        jsonData[${commandArgs[0]}, ${jsonTableObjectNumber["${commandArgs[0]}"]}, "${varArray[$i]}"]="${valArray[$i]}"
    done
    jsonTableObjectNumber["${commandArgs[0]}"]=$((${jsonTableObjectNumber[${commandArgs[0]}]}+1))
    unset valArray
    unset varArray
    rewriteDb
}

verifyArgsCreateTable()
{
    if [[ "$1" = "" ]] || [[ "$2" = "" ]]; then
        echoError "Syntax error"
        exit $exitFailure
    fi
    for ((j=0; ;j++))
    do
        if [[ "${jsonTableNames[$j]}" = "" ]]; then
            break
        fi
        if [[ "${jsonTableNames[$j]}" = "$1" ]]; then
            echoError "Table already exist"
            exit $exitFailure
        fi
    done
    if [[ "$2" =~ (,,) ]] || [[ "$2" = ","* ]] || [[ "$2" = *"," ]]; then
        echoError "Syntax error"
        exit $exitFailure
    fi
}

createTable()
{
    verifyArgsCreateTable "$1" "$2"

    declare -A tableArray
    arg="$2"
    for (( k=0; 1; k++))
    do
        if [[ "$arg" =~ ([^\,]*)\, ]]; then
            jsonDesc["$1", $k]="${BASH_REMATCH[1]}"
            arg="${arg#*\,}"
        elif [[ "$arg" != "" ]]; then
            jsonDesc["$1", $k]="$arg"
            arg=""
        else
            break
        fi
    done

    jsonTableNames[${#jsonTableNames[*]}]="$1"
    jsonTableObjectNumber["$1"]=0

    rewriteDb
}

create()
{
    parseJson
	if [[ "${commandArgs[0]}" = "database" ]]; then
        if [[ -f "$fileName" ]]; then
            echoError "Database already exists"
            exit $exitFailure
        fi
        if [[ ! -w "$PWD" ]]; then
            echoError "No write permissions on the folder"
            exit $exitFailure
        fi
        if [[ "$(df --output=avail -h "$PWD" | sed '1d;s/[^0-9]//g')" = "0" ]]; then
            echoError "No place left on the disk"
            exit $exitFailure
        fi
		echo -e "{}" > "$fileName"
	elif [[ "${commandArgs[0]}" = "table" ]]; then
        createTable "${commandArgs[1]}" "${commandArgs[2]}"
	else
        echoError "Syntax error"
		exit $exitFailure
	fi
}

echoError()
{
    echo -e "$@" >&2
}






checkFileName
setOptions "$@"

parseCommands "$@"