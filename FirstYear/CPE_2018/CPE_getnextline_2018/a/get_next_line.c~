/*
** EPITECH PROJECT, 2018
** main.c
** File description:
** main functions
*/

#include "get_next_line.h"
#include <unistd.h>
#include <stdlib.h>
#include <fcntl.h>

int my_strlen(char const *str)
{
    int i = 0;

    for (i = 0; str[i] != '\0'; i++);
    return (i);
}

char *my_stradd(char *dest, char const *src)
{
    int i = 0;
    char *new;

    new = malloc(sizeof(char) * (my_strlen(dest) + my_strlen(src) + 1));
    if (new == NULL)
        return (NULL);
    if (src[0] == 0)
        return (new);
    for (i = 0; dest[i] != 0; i++)
        new[i] = dest[i];
    for (int j = 0; src[j] != 0; i++, j++)
        new[i] = src[j];
    new[i] = '\0';
    free(dest);
    return (new);
}

char *read_file(int fd, char *content, int *nbline_max)
{
    char buffer[READ_SIZE + 1];
    int error = 1;

    if (content != NULL) {
        free(content), content = malloc(sizeof(char));
    } else
        content = malloc(sizeof(char));
    if (read(fd, buffer, READ_SIZE) <= 0 || READ_SIZE == 0 || content == NULL)
        return (NULL);
    for (; error > 0; error = read(fd, buffer, READ_SIZE)) {
        buffer[READ_SIZE] = '\0', content = my_stradd(content, buffer);
        for (int i = 0; i < READ_SIZE; i++)
            buffer[i] = 0;
    }
    for (int i = 0; content[i] != '\0'; i++) {
        (content[i] == '\n' && content[i+1] == 0) ? (content[i] = 0) : (0);
        (content[i] == '\n') ? (*nbline_max += 1) : (0);
    }
    return (content);
}

char *get_next_line2(int character, int *nbline, char *line, char *cnt)
{
    for (int i = 0; i < *nbline; character++) {
        if (cnt[character] == '\n')
            i++;
        if (cnt[i] == '\0') {
            return (NULL);
        }
    }
    line = malloc(sizeof(char) * (my_strlen(cnt) + 1));
    if (line == NULL)
        return (NULL);
    for (int i = character, j = 0; cnt[i] != '\n' && cnt[i] != '\0'; i++, j++) {
        line[j] = cnt[i];
        line[j+1] = '\0';
    }
    *nbline += 1;
    return (line);
}

char *get_next_line(int fd)
{
    static char *cnt;
    static int nbline = 0;
    static int nbline_max = 1;
    static int fd_moment = 0;
    int character = 0;
    char *line;

    if (fd == -1)
        return (NULL);
    if (cnt == NULL || fd_moment == 0 || fd_moment != fd) {
        nbline_max = 1;
        cnt = read_file(fd, cnt, &nbline_max);
        fd_moment = fd;
        nbline = 0;
    }
    if (nbline == -1 || nbline >= nbline_max || cnt == NULL)
        return (NULL);
    line = get_next_line2(character, &nbline, line, cnt);
    return (line);
}
